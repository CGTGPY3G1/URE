#ifndef UNNAMED_ENUMS_H
#define UNNAMED_ENUMS_H
#include <cstdint>
namespace B00289996 {
	enum class RendererType : std::uint8_t {
		OPENGL,
		VULKAN
	};

	enum class WindowType : std::uint8_t {
		WINDOW_TYPE_GLFW,
		WINDOW_TYPE_VULKAN
	};

	enum class KeyboardKey : std::int32_t {
		KEY_NULL = -1,
		KEY_SPACE, KEY_APOSTROPHE, KEY_COMMA, KEY_MINUS, KEY_PERIOD, KEY_SLASH, KEY_SEMICOLON, KEY_EQUAL,
		KEY_LEFT_BRACKET, KEY_RIGHT_BRACKET, KEY_BACKSLASH, KEY_ESCAPE, KEY_ENTER, KEY_TAB, KEY_BACKSPACE, KEY_INSERT,
		KEY_DELETE, KEY_RIGHT, KEY_LEFT, KEY_DOWN, KEY_UP, KEY_PAGE_UP, KEY_PAGE_DOWN, KEY_HOME, KEY_END, 
		KEY_CAPS_LOCK, KEY_SCROLL_LOCK, KEY_NUM_LOCK, KEY_PRINT_SCREEN, KEY_PAUSE, KEY_LEFT_SHIFT, KEY_RIGHT_SHIFT,
		KEY_LEFT_CONTROL, KEY_RIGHT_CONTROL, KEY_LEFT_ALT, KEY_RIGHT_ALT,
		KEY_A, KEY_B, KEY_C, KEY_D, KEY_E, KEY_F, KEY_G, KEY_H, KEY_I, KEY_J, KEY_K, KEY_L, KEY_M,
		KEY_N, KEY_O, KEY_P, KEY_Q, KEY_R, KEY_S, KEY_T, KEY_U, KEY_V, KEY_W, KEY_X, KEY_Y, KEY_Z,
		KEY_0, KEY_1, KEY_2, KEY_3, KEY_4, KEY_5, KEY_6, KEY_7, KEY_8, KEY_9,
		KEY_NUMPAD_0, KEY_NUMPAD_1, KEY_NUMPAD_2, KEY_NUMPAD_3, KEY_NUMPAD_4,
		KEY_NUMPAD_5, KEY_NUMPAD_6, KEY_NUMPAD_7, KEY_NUMPAD_8, KEY_NUMPAD_9,
		KEY_F1, KEY_F2, KEY_F3, KEY_F4, KEY_F5, KEY_F6, KEY_F7, KEY_F8, KEY_F9, KEY_F10, KEY_F11, KEY_F12,
		NUMBER_OF_KEYS
	};
	enum class MouseButton : std::int32_t {
		MOUSE_BUTTON_NULL = -1, 
		MOUSE_BUTTON_1, 
		MOUSE_BUTTON_2, 
		MOUSE_BUTTON_3, 
		MOUSE_BUTTON_4, 
		MOUSE_BUTTON_5,
		NUMBER_OF_MOUSE_BUTTONS
	};

	struct InputInfo {
		bool buttons[(unsigned int)MouseButton::NUMBER_OF_MOUSE_BUTTONS] = { false };
		bool keys[(unsigned int)KeyboardKey::NUMBER_OF_KEYS] = { false };
		float x = 0.0f, y = 0.0f;
	};
}
#endif // !UNNAMED_ENUMS_H